from z3 import *

LEN = 63

s = Solver()
v3 = [BitVec(f'v3_{i}', 16) for i in range(LEN)]

for i in range(LEN):
	s.add(v3[i] >= 32)
	s.add(v3[i] <= 126)

s.add(v3[0] == ord('E'))
s.add(v3[1] == ord('P'))
s.add(v3[2] == ord('F'))
s.add(v3[3] == ord('L'))
s.add(v3[4] == ord('{'))
s.add(v3[-1] == ord('}'))


s.add(v3[36] ^ v3[15] ^ v3[14] == 22)
s.add(v3[17] ^ v3[41] ^ v3[33] == 29)
s.add(v3[13] ^ v3[2] ^ v3[25] == 70)
s.add(v3[12] ^ v3[9] ^ v3[37] == 105)
s.add(v3[58] ^ v3[10] ^ v3[62] == 86)
s.add(v3[52] ^ v3[1] ^ v3[9] == 18)
s.add(v3[28] ^ v3[23] ^ v3[36] == 36)
s.add(v3[52] ^ v3[45] ^ v3[1] == 13)
s.add(v3[39] ^ v3[55] ^ v3[31] == 50)
s.add(v3[19] ^ v3[4] ^ v3[54] == 76)
s.add(v3[61] ^ v3[45] ^ v3[26] == 31)
s.add(v3[52] ^ v3[47] ^ v3[39] == 46)
s.add(v3[58] ^ v3[34] ^ v3[6] == 92)
s.add(v3[41] ^ v3[36] ^ v3[22] == 119)
s.add(v3[4] ^ v3[36] ^ v3[17] == 61)
s.add(v3[32] ^ v3[38] ^ v3[0] == 88)
s.add(v3[37] ^ v3[20] ^ v3[31] == 47)
s.add(v3[53] ^ v3[46] ^ v3[5] == 82)
s.add(v3[47] ^ v3[27] ^ v3[39] == 46)
s.add(v3[54] ^ v3[48] ^ v3[2] == 124)
s.add(v3[11] ^ v3[19] ^ v3[26] == 11)
s.add(v3[24] ^ v3[52] ^ v3[50] == 21)
s.add(v3[1] ^ v3[25] ^ v3[7] == 104)
s.add(v3[16] ^ v3[60] ^ v3[20] == 100)
s.add(v3[60] ^ v3[24] ^ v3[26] == 18)

s.add(v3[37] + v3[48] + v3[4] == 348)
s.add(v3[27] + v3[29] + v3[35] == 196)
s.add(v3[6] + v3[58] + v3[54] == 213)
s.add(v3[22] + v3[29] + v3[5] == 229)
s.add(v3[17] + v3[46] + v3[33] == 259)
s.add(v3[60] + v3[27] + v3[3] == 173)
s.add(v3[49] + v3[27] + v3[38] == 195)
s.add(v3[15] + v3[3] + v3[27] == 176)
s.add(v3[24] + v3[14] + v3[16] == 295)
s.add(v3[59] + v3[22] + v3[61] == 261)
s.add(v3[29] + v3[48] + v3[53] == 268)
s.add(v3[17] + v3[27] + v3[22] == 193)
s.add(v3[46] + v3[21] + v3[15] == 260)
s.add(v3[14] + v3[40] + v3[3] == 209)
s.add(v3[49] + v3[4] + v3[35] == 313)
s.add(v3[5] + v3[13] + v3[59] == 280)
s.add(v3[57] + v3[26] + v3[36] == 303)
s.add(v3[30] + v3[31] + v3[48] == 351)
s.add(v3[1] + v3[16] + v3[23] == 232)
s.add(v3[28] + v3[9] + v3[55] == 265)
s.add(v3[53] + v3[27] + v3[59] == 247)
s.add(v3[12] + v3[59] + v3[28] == 315)
s.add(v3[53] + v3[6] + v3[38] == 197)

s.add(v3[1] - (v3[26] + v3[61]) == -59)
s.add(v3[62] - (v3[43] + v3[52]) == 27)
s.add(v3[18] - (v3[40] + v3[47]) == -45)
s.add(v3[41] - (v3[1] + v3[58]) == -80)
s.add(v3[20] - (v3[44] + v3[57]) == -165)
s.add(v3[5] - (v3[55] + v3[25]) == -65)
s.add(v3[59] - (v3[58] + v3[42]) == -111)
s.add(v3[33] - (v3[57] + v3[36]) == -112)
s.add(v3[26] - (v3[42] + v3[37]) == -147)
s.add(v3[25] - (v3[31] + v3[10]) == -137)
s.add(v3[27] - (v3[53] + v3[46]) == -141)
s.add(v3[39] - (v3[14] + v3[55]) == -20)
s.add(v3[52] - (v3[1] + v3[55]) == -83)
s.add(v3[29] - (v3[56] + v3[35]) == -151)
s.add(v3[26] - (v3[54] + v3[24]) == -101)
s.add(v3[51] - (v3[43] + v3[17]) == -20)
s.add(v3[12] - (v3[8] + v3[47]) == -44)
s.add(v3[61] - (v3[45] + v3[53]) == -140)
s.add(v3[49] - (v3[5] + v3[23]) == -36)
s.add(v3[1] - (v3[53] + v3[24]) == -125)
s.add(v3[10] - (v3[48] + v3[62]) == -130)
s.add(v3[28] - (v3[3] + v3[42]) == -97)
s.add(v3[43] - (v3[12] + v3[16]) == -168)
s.add(v3[21] - (v3[20] + v3[10]) == -53)
s.add(v3[12] - (v3[21] + v3[42]) == -119)
s.add(v3[52] - (v3[47] + v3[0]) == -129)
s.add(v3[46] - (v3[52] + v3[11]) == -5)
s.add(v3[41] - (v3[36] + v3[15]) == -75)
s.add(v3[15] - (v3[14] + v3[41]) == -126)
s.add(v3[21] - (v3[2] + v3[43]) == -5)
s.add(v3[11] - (v3[29] + v3[51]) == -79)
s.add(v3[14] - (v3[9] + v3[55]) == -85)


print('checking...')
if s.check() == sat:
	m = s.model()
	f = []
	for i in range(LEN):
		try:
			f.append(chr(m[v3[i]].as_long()))

		except:
			f.append('_')
	print(''.join(f))
else:
	print('unsat')

# EPFL{R3g1st3r_R3g1st3r_1n_L1b4rt.s0_wh3r3_w1ll_my_JN1_C4ll_g0?}
